name: Deploy Homologação

on:
  push:
    branches:
      - homolog
    paths:
      - "bitbook-api/**"
      - "bittopics-api/**"
      - "bittrainers-api/**"
  pull_request:
    types: [closed]
    branches:
      - homolog
    paths:
      - "bitbook-api/**"
      - "bittopics-api/**"
      - "bittrainers-api/**"

jobs:
  deploy:
    # Executa apenas se for push direto ou PR mergeado
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Busca todo o histórico para comparação

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Detect changed APIs
        id: detect-apis
        run: |
          CHANGED_APIS=()

          # Determina o commit base para comparação
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Para PR, compara com o commit base do PR
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # Para push direto, compara com o commit anterior
            BASE_SHA="HEAD^"
            HEAD_SHA="HEAD"
          fi

          echo "Comparing changes between $BASE_SHA and $HEAD_SHA"

          # Detecta APIs alteradas
          if git diff --name-only $BASE_SHA $HEAD_SHA | grep -q "^bitbook-api/"; then
            CHANGED_APIS+=("bitbook-api")
          fi
          if git diff --name-only $BASE_SHA $HEAD_SHA | grep -q "^bittopics-api/"; then
            CHANGED_APIS+=("bittopics-api")
          fi
          if git diff --name-only $BASE_SHA $HEAD_SHA | grep -q "^bittrainers-api/"; then
            CHANGED_APIS+=("bittrainers-api")
          fi

          if [ ${#CHANGED_APIS[@]} -eq 0 ]; then
            echo "No APIs changed in this commit"
            exit 0
          fi

          echo "changed_apis=${CHANGED_APIS[*]}" >> $GITHUB_OUTPUT
          echo "Changed APIs: ${CHANGED_APIS[*]}"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          # Limpa a chave de caracteres inválidos e formata corretamente
          echo "${{ secrets.HOMOLOG_EC2_SSH_KEY }}" | \
            sed 's/%$//' | \
            sed 's/\r$//' | \
            sed 's/^[ \t]*//' | \
            sed 's/[ \t]*$//' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.HOMOLOG_EC2_HOST }} >> ~/.ssh/known_hosts

          # Debug: Verificar se a chave foi salva corretamente
          echo "Checking SSH key format..."
          ssh-keygen -l -f ~/.ssh/deploy_key || echo "Invalid key format"

          # Debug: Mostrar as primeiras linhas da chave (sem expor o conteúdo completo)
          echo "First few lines of the key:"
          head -n 2 ~/.ssh/deploy_key

      - name: Deploy each changed API
        run: |
          for api in ${{ steps.detect-apis.outputs.changed_apis }}; do
            echo "Deploying $api..."
            
            # Verificar se a API existe
            if [ ! -d "$api" ]; then
              echo "Error: API directory $api not found"
              exit 1
            fi
            
            # Configurar variáveis do banco de dados
            if [[ "$api" == "bitbook-api" ]]; then
              DB_NAME=${{ secrets.HOMOLOG_BANCO_BITBOOK }}
            elif [[ "$api" == "bittopics-api" ]]; then
              DB_NAME=${{ secrets.HOMOLOG_BANCO_BITTOPICS }}
            elif [[ "$api" == "bittrainers-api" ]]; then
              DB_NAME=${{ secrets.HOMOLOG_BANCO_BITTRAINERS }}
            else
              echo "Error: Invalid API detected"
              exit 1
            fi

            # Backup do banco de dados via EC2
            echo "Backing up database through EC2..."
            backup_file="backup_${api}_homolog_$(date +%Y%m%d_%H%M%S).sql"
            ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.HOMOLOG_EC2_USER }}@${{ secrets.HOMOLOG_EC2_HOST }} \
              "mkdir -p /home/ec2-user/bitplus-backend/backups && \
              mysqldump -h ${{ secrets.HOMOLOG_DB_HOST }} -u ${{ secrets.HOMOLOG_DB_USER }} -p${{ secrets.HOMOLOG_DB_PASSWORD }} $DB_NAME > /home/ec2-user/bitplus-backend/backups/$backup_file"

            # Instalar dependências
            cd $api
            npm ci

            # Build da aplicação
            echo "Building application..."
            npm run build

            # Deploy via SSH
            echo "Deploying to EC2..."
            rsync -avz --delete \
              --exclude 'node_modules' \
              --exclude '.git' \
              --exclude '*.sql' \
              -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
              ./ ${{ secrets.HOMOLOG_EC2_USER }}@${{ secrets.HOMOLOG_EC2_HOST }}:/home/ec2-user/bitplus-backend/$api/

            # Executar migrations e reiniciar aplicação via EC2
            echo "Running migrations and restarting application..."
            ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.HOMOLOG_EC2_USER }}@${{ secrets.HOMOLOG_EC2_HOST }} \
              "cd /home/ec2-user/bitplus-backend/$api && \
              npm ci --production && \
              echo 'Running migrations...' && \
              npm run migration:show && \
              npm run migration:run && \
              echo 'Restarting application...' && \
              pm2 restart $api || pm2 start dist/main.js --name $api"

            cd ..
          done

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed for one or more APIs"
          exit 1
