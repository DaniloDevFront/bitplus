name: Deploy Homologação

on:
  push:
    branches:
      - homolog
    paths:
      - "bitbook-api/**"
      - "bittopics-api/**"
      - "bittrainers-api/**"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Busca todo o histórico para comparação

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Detect changed APIs
        id: detect-apis
        run: |
          CHANGED_APIS=()
          # Usa o último commit para comparação
          if git diff --name-only HEAD^ HEAD | grep -q "^bitbook-api/"; then
            CHANGED_APIS+=("bitbook-api")
          fi
          if git diff --name-only HEAD^ HEAD | grep -q "^bittopics-api/"; then
            CHANGED_APIS+=("bittopics-api")
          fi
          if git diff --name-only HEAD^ HEAD | grep -q "^bittrainers-api/"; then
            CHANGED_APIS+=("bittrainers-api")
          fi

          if [ ${#CHANGED_APIS[@]} -eq 0 ]; then
            echo "No APIs changed in this commit"
            exit 0
          fi

          echo "changed_apis=${CHANGED_APIS[*]}" >> $GITHUB_OUTPUT
          echo "Changed APIs: ${CHANGED_APIS[*]}"

      - name: Deploy each changed API
        run: |
          for api in ${{ steps.detect-apis.outputs.changed_apis }}; do
            echo "Deploying $api..."
            
            # Verificar se a API existe
            if [ ! -d "$api" ]; then
              echo "Error: API directory $api not found"
              exit 1
            fi
            
            # Configurar variáveis do banco de dados
            if [[ "$api" == "bitbook-api" ]]; then
              DB_NAME=${{ secrets.HOMOLOG_BANCO_BITBOOK }}
              DB_HOST=${{ secrets.HOMOLOG_DB_HOST }}
              DB_USER=${{ secrets.HOMOLOG_DB_USER }}
              DB_PASSWORD=${{ secrets.HOMOLOG_DB_PASSWORD }}
            elif [[ "$api" == "bittopics-api" ]]; then
              DB_NAME=${{ secrets.HOMOLOG_BANCO_BITTOPICS }}
              DB_HOST=${{ secrets.HOMOLOG_DB_HOST }}
              DB_USER=${{ secrets.HOMOLOG_DB_USER }}
              DB_PASSWORD=${{ secrets.HOMOLOG_DB_PASSWORD }}
            elif [[ "$api" == "bittrainers-api" ]]; then
              DB_NAME=${{ secrets.HOMOLOG_BANCO_BITTRAINERS }}
              DB_HOST=${{ secrets.HOMOLOG_DB_HOST }}
              DB_USER=${{ secrets.HOMOLOG_DB_USER }}
              DB_PASSWORD=${{ secrets.HOMOLOG_DB_PASSWORD }}
            else
              echo "Error: Invalid API detected"
              exit 1
            fi

            # Backup do banco de dados
            echo "Backing up database..."
            mysqldump -h $DB_HOST -u $DB_USER -p$DB_PASSWORD $DB_NAME > backup_${api}_homolog.sql

            # Instalar dependências
            cd $api
            npm ci

            # Verificar migrations pendentes
            echo "Checking pending migrations..."
            npm run migration:show

            # Executar migrations
            echo "Running migrations..."
            npm run migration:run

            # Build da aplicação
            echo "Building application..."
            npm run build

            # Configurar SSH
            echo "Setting up SSH..."
            mkdir -p ~/.ssh
            echo "${{ secrets.HOMOLOG_EC2_SSH_KEY }}" > ~/.ssh/deploy_key
            chmod 600 ~/.ssh/deploy_key
            ssh-keyscan -H ${{ secrets.HOMOLOG_EC2_HOST }} >> ~/.ssh/known_hosts

            # Deploy via SSH
            echo "Deploying to EC2..."
            rsync -avz --delete \
              --exclude 'node_modules' \
              --exclude '.git' \
              --exclude '*.sql' \
              ./ ${{ secrets.HOMOLOG_EC2_USER }}@${{ secrets.HOMOLOG_EC2_HOST }}:/var/www/$api/

            # Reiniciar aplicação
            ssh -i ~/.ssh/deploy_key ${{ secrets.HOMOLOG_EC2_USER }}@${{ secrets.HOMOLOG_EC2_HOST }} \
              "cd /var/www/$api && \
              npm ci --production && \
              pm2 restart $api || pm2 start dist/main.js --name $api"

            cd ..
          done

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed for one or more APIs"
          exit 1
